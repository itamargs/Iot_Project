HOW TO USE (In development)



1 ---- device_sensor.py ---------
1.1) devices need to declare the abstract methods from sensor class ([sensor.py]) - OtherWise, for safety measure- a runtime error will accure.
the abstract methods will be declared as follow:

-- # override from tensiometer
--    def foo(self, files, path):
--      return super(Device, self).foo(arg1, arg2)

Note:
please describe where you overriding from, so the code would be clear. ('tensiometer' is the sensor name, replace it with your sensor)

1.2) for new sensor support only need to adjust the 'sensor.py' file.


2. ----sensor.py----

2.1 All sensors class MUST have the following methods:

def dataReduction(self, files, path): --> What it Gets?: pointer to list of files, path to save the file after convertion)
				    	  What it Creates?: reduced file in the output folder

2.2) define if sensor need compression and/or reducing.
	for example. no need to compress .wav file after it was reduced to .mp3 couse compressing mp3 files isn't useful.

3 ----- First Start -------
3.1) When you first start device or when you want to change the device sensor. in the device menu, press '1' in the first time to create new.
	settings file
